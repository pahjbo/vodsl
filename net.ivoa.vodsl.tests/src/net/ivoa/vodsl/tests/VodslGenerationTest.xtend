/*
 * generated by Xtext 2.9.1
 */
package net.ivoa.vodsl.tests

import com.google.inject.Inject
import net.ivoa.vodsl.vodsl.VoDataModel
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*
import org.eclipse.xtext.generator.InMemoryFileSystemAccess
import org.eclipse.xtext.generator.IGenerator2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.util.CancelIndicator
import javax.xml.validation.SchemaFactory
import javax.xml.XMLConstants
import javax.xml.transform.stream.StreamSource
import java.io.StringReader
import org.xml.sax.SAXParseException
import java.util.LinkedList
import org.xml.sax.ErrorHandler
import org.xml.sax.SAXException

@RunWith(XtextRunner)
@InjectWith(VodslInjectorProvider)
class VodslGenerationTest extends BaseTest {

	@Inject
	ParseHelper<VoDataModel> parseHelper
	@Inject IGenerator2 underTest
	
	val context = new IGeneratorContext {
				
				override getCancelIndicator() {
					return CancelIndicator.NullImpl
				}
				
				}

	@Test 
	def void generate() {
		val model = parseHelper.parse(example2)
		assertNotNull(model)
		val fsa = new InMemoryFileSystemAccess()
	    underTest.doGenerate(model.eResource, fsa, context)
	   println(fsa.textFiles)
	   
	     val factory = 
            SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
        val schema = factory.newSchema(new StreamSource('http://volute.g-vo.org/svn/trunk/projects/dm/vo-dml/xsd/vo-dml-v1.0.xsd'));
        val exceptions = new LinkedList<SAXParseException>();
        val validator = schema.newValidator();
        validator.errorHandler = new ErrorHandler(){
									
									override error(SAXParseException exception) throws SAXException {
										exceptions.add(exception)
									}
									
									override fatalError(SAXParseException exception) throws SAXException {
										exceptions.add(exception)
									}
									
									override warning(SAXParseException exception) throws SAXException {
										exceptions.add(exception)
									}
        	
        }
        validator.validate(new StreamSource(new StringReader(
        	   new StringBuffer(fsa.textFiles.get(fsa.textFiles.keySet().head)).toString()
        )))
	  
	     exceptions.forEach[println(it)]
	     assertTrue("validation errors", exceptions.size == 0)
	     
		
	}

}
