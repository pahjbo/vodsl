/*
 * generated by Xtext
 */
package net.ivoa.vodsl.scoping;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import javax.inject.Inject;

import com.google.common.base.Predicate;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;

import net.ivoa.vodsl.scoping.AbstractVodslScopeProvider;
import net.ivoa.vodsl.vodsl.PrimitiveType;
import net.ivoa.vodsl.vodsl.Role;
import net.ivoa.vodsl.vodsl.SubSet;
import net.ivoa.vodsl.vodsl.VoDataModel;
import net.ivoa.vodsl.vodsl.VodslPackage;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.FilteringScope;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping on how and when
 * to use it
 *
 */
public class VodslScopeProvider extends AbstractVodslScopeProvider {

    
    
    private VodslPackage pkg;

    /**
     * 
     */
    public VodslScopeProvider() {
        super();
        pkg = VodslPackage.eINSTANCE ;
    }

    @Override
    public IScope getScope( final EObject context, final EReference reference) {
        
        IScope existingScope = super.getScope(context, reference);
        if (context instanceof SubSet && reference == VodslPackage.Literals.SUB_SET__REF) {
            //only find objects that are in parent
             EObject container = context.eContainer();
              
            final List<EObject> superclasses = findSuperTypes(container);
            IScope filteredScope = new FilteringScope(existingScope, new Predicate<IEObjectDescription>() {
                public boolean apply(IEObjectDescription input) {
                    final EObject eContainer = input.getEObjectOrProxy().eContainer();
                    return superclasses.contains(eContainer);
                }
            });
            return filteredScope;
            

        } else if (context instanceof SubSet && reference == VodslPackage.Literals.SUB_SET__TYPE) {
            
             EObject ref = (EObject) context.eGet(context.eClass().getEStructuralFeature("ref"));
             EStructuralFeature sf = ref.eClass().getEStructuralFeature("type");
             
            if (sf != null) {
				EObject refType = (EObject) ref.eGet(sf);
				VoDataModel root = EcoreUtil2.getContainerOfType(context, VoDataModel.class);
				final List<? extends EObject> types = EcoreUtil2.getAllContentsOfType(root, refType.getClass());
				if (refType instanceof PrimitiveType) {
					types.clear(); // primitive type cannot be extended
				}
				Iterator<? extends EObject> iter = types.iterator();
				while (iter.hasNext()) {
					EObject eObject = (EObject) iter.next();
					if (!isSubType(eObject, refType)) {
						iter.remove();
					}
				}
				IScope filteredScope = new FilteringScope(existingScope, new Predicate<IEObjectDescription>() {
					public boolean apply(IEObjectDescription input) {
						return types.contains(input.getEObjectOrProxy());
					}
				});
				return filteredScope;
			}

        }
        return existingScope;
    }

    /**
     * test is a type is a subtype of the reference type
     * @param eObject
     * @param refType
     * @return
     */
    private boolean isSubType(EObject eObject, EObject refType) {
        EObject stype = (EObject) eObject.eGet(eObject.eClass().getEStructuralFeature("superType"));
        while (stype != null) {
           if(stype == refType) return true;
           EStructuralFeature eStructuralFeature = stype.eClass().getEStructuralFeature("superType");
           stype = eStructuralFeature != null ? (EObject) stype.eGet(eStructuralFeature): null;
       }
        return false;
    }

    private List<EObject> findSuperTypes(EObject container) {
        final List<EObject> superclasses = new ArrayList<>();
         EObject stype = (EObject) container.eGet(container.eClass().getEStructuralFeature("superType"));
         while (stype != null) {
            superclasses.add(stype);
            EStructuralFeature eStructuralFeature = stype.eClass().getEStructuralFeature("superType");
            stype = eStructuralFeature != null ? (EObject) stype.eGet(eStructuralFeature): null;
        }
        return superclasses;
    }

}
